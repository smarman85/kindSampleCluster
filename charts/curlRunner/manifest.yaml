---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ping-app-config
data:
  main.go: |
    package main

    import (
        "encoding/json"
        "fmt"
        "net/http"
        "os"
    )

    type Response struct {
        Msg string `json:"msg"`
    }

    func main() {
        serviceName := os.Getenv("SERVICE_NAME")
        if serviceName == "" {
            serviceName = "default-service"
        }

        http.HandleFunc("/ping", func(w http.ResponseWriter, r *http.Request) {
            resp := Response{
                Msg: fmt.Sprintf("pong from %s", serviceName),
            }
            w.Header().Set("Content-Type", "application/json")
            json.NewEncoder(w).Encode(resp)
        })

        port := os.Getenv("PORT")
        if port == "" {
            port = "8080"
        }

        fmt.Printf("Server running on port %s\n", port)
        http.ListenAndServe(":"+port, nil)
    }
---
apiVersion: v1
kind: Service
metadata:
  name: svc1
  namespace: curlrunner
spec:
  # selector tells Kubernetes what Deployment this Service
  # belongs to
  selector:
    app: curlrunner-app1
  ports:
  - port: 80
    name: http-port
    targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: svc2
  namespace: curlrunner
spec:
  # selector tells Kubernetes what Deployment this Service
  # belongs to
  selector:
    app: curlrunner-app2
  ports:
  - port: 80
    name: http-port
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: curlrunner-app1
  namespace: curlrunner
spec:
  selector:
    matchLabels:
      app: curlrunner-app1
  replicas: 1
  template:
    metadata:
      labels:
        app: curlrunner-app1
        repo: curlrunner
    spec:
      containers:
      - name: app1
        image: golang:1.20-bullseye
        tty: true
        stdin: true
        #command: ["/bin/bash"]
        command: ["go", "run", "/app/main.go"]
        ports:
        - containerPort: 8080
        env:
          - name: SERVICE_NAME
            value: service1
        volumeMounts:
          - name: config
            mountPath: /app/main.go
            subPath: main.go
      volumes:
        - name: config
          configMap:
            name: ping-app-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: curlrunner-app2
  namespace: curlrunner
spec:
  selector:
    matchLabels:
      app: curlrunner-app2
  replicas: 1
  template:
    metadata:
      labels:
        app: curlrunner-app2
        repo: curlrunner
    spec:
      containers:
      - name: app2
        image: golang:1.20-bullseye
        tty: true
        stdin: true
        # command: ["/bin/bash"]
        command: ["go", "run", "/app/main.go"]
        ports:
        - containerPort: 8080
        env:
          - name: SERVICE_NAME
            value: service2
        volumeMounts:
          - name: config
            mountPath: /app/main.go
            subPath: main.go
      volumes:
        - name: config
          configMap:
            name: ping-app-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: runner
  namespace: curlrunner
spec:
  selector:
    matchLabels:
      app: runner
  replicas: 1
  template:
    metadata:
      labels:
        app: runner
        repo: curlrunner
    spec:
      containers:
      - name: runner
        image: golang:1.20-bullseye
        tty: true
        stdin: true
        command: ["/bin/bash"]
        ports:
        - containerPort: 8080
        env:
          - name: SERVICE_NAME
            value: runner
